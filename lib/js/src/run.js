// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Json$ReasonParse = require("./json.js");
var Node$ReasonParse = require("./node.js");
var Regex$ReasonParse = require("./regex.js");
var Pstream$ReasonParse = require("./pstream.js");

var partial_arg = Stream.of_list(/* :: */[
      Regex$ReasonParse.letters,
      /* :: */[
        Regex$ReasonParse.digits,
        /* :: */[
          Regex$ReasonParse.letters,
          /* :: */[
            Regex$ReasonParse.digits,
            /* [] */0
          ]
        ]
      ]
    ]);

function t(param) {
  return Pstream$ReasonParse.tillFailure(partial_arg, param);
}

var match = t("abc123pqr789");

var results = match[0];

function print_results(results) {
  return List.iter((function (param) {
                console.log(Node$ReasonParse.stringOfValue(param[0]));
                console.log(Node$ReasonParse.stringOfParseData(param[1]));
                return /* () */0;
              }), results);
}

print_results(results);

console.log(Node$ReasonParse.stringOfParseData(Pstream$ReasonParse.mergeParseData(/* None */0, "abc123pqr789", List.split(results)[1])));

console.log(Node$ReasonParse.stringOfResult(Pstream$ReasonParse.seq(/* :: */[
              Regex$ReasonParse.letters,
              /* :: */[
                Regex$ReasonParse.digits,
                /* :: */[
                  Regex$ReasonParse.letters,
                  /* :: */[
                    Regex$ReasonParse.digits,
                    /* [] */0
                  ]
                ]
              ]
            ], "abc123pqr789xyz")));

var atoj = Pstream$ReasonParse.sepBy(Regex$ReasonParse.digit, Regex$ReasonParse.letter, "a1b2c3d4efghijklmnopqrstuvwxyz4567pqrs");

console.log(Node$ReasonParse.stringOfResult(atoj));

console.log(Node$ReasonParse.stringOfResult(Json$ReasonParse.quotedString("\"My bonny lies over the ocean.\"sdfa  324")));

console.log(Node$ReasonParse.stringOfResult(Regex$ReasonParse.integer("123abc")));

console.log(Node$ReasonParse.stringOfResult(Curry._1(Regex$ReasonParse.$$float, "123.000abc")));

console.log(Node$ReasonParse.stringOfResult(Json$ReasonParse.comma(",:][}{")));

var partial_arg_001 = /* :: */[
  Regex$ReasonParse.integer,
  /* [] */0
];

var partial_arg$1 = /* :: */[
  Json$ReasonParse.quotedString,
  partial_arg_001
];

function primVal(param) {
  return Pstream$ReasonParse.alt(partial_arg$1, param);
}

var primValArray = Pstream$ReasonParse.between(Json$ReasonParse.lBrak, (function (param) {
        return Pstream$ReasonParse.sepBy(Json$ReasonParse.comma, primVal, param);
      }), Json$ReasonParse.rBrak);

function array(primVal) {
  console.log("array called.");
  var partial_arg = arrayVal(primVal);
  return Pstream$ReasonParse.between(Json$ReasonParse.lBrak, (function (param) {
                return Pstream$ReasonParse.sepBy(Json$ReasonParse.comma, partial_arg, param);
              }), Json$ReasonParse.rBrak);
}

function arrayVal(primVal) {
  var partial_arg_001 = /* :: */[
    array(primVal),
    /* [] */0
  ];
  var partial_arg = /* :: */[
    primVal,
    partial_arg_001
  ];
  return (function (param) {
      return Pstream$ReasonParse.alt(partial_arg, param);
    });
}

var partial_arg_001$1 = /* :: */[
  Json$ReasonParse.quotedString,
  /* [] */0
];

var partial_arg$2 = /* :: */[
  Regex$ReasonParse.integer,
  partial_arg_001$1
];

function primVal$1(param) {
  return Pstream$ReasonParse.alt(partial_arg$2, param);
}

console.log("");

console.log(Node$ReasonParse.stringOfResult(array(primVal$1)("[155,\"My bonny lies over the ocean.\",324]***")));

console.log("");

var tillFailure = Pstream$ReasonParse.tillFailure;

var p = Regex$ReasonParse.letters;

var q = Regex$ReasonParse.digits;

var r = Json$ReasonParse.quotedString;

var s = "abc123\\\"abc123\\\"";

var ds = Regex$ReasonParse.digits;

var ls = Regex$ReasonParse.letters;

var between = Pstream$ReasonParse.between;

var sepBy = Pstream$ReasonParse.sepBy;

var alt = Pstream$ReasonParse.alt;

exports.tillFailure = tillFailure;
exports.p = p;
exports.q = q;
exports.r = r;
exports.s = s;
exports.t = t;
exports.results = results;
exports.print_results = print_results;
exports.ds = ds;
exports.ls = ls;
exports.atoj = atoj;
exports.primValArray = primValArray;
exports.between = between;
exports.sepBy = sepBy;
exports.alt = alt;
exports.array = array;
exports.arrayVal = arrayVal;
exports.primVal = primVal$1;
/* partial_arg Not a pure module */
