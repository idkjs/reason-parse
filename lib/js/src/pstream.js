// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Node$ReasonParse = require("./node.js");
var Combs$ReasonParse = require("./combs.js");
var Regex$ReasonParse = require("./regex.js");

var Done = Caml_exceptions.create("Pstream-ReasonParse.Done");

function streamAlt(stream, str) {
  try {
    Stream.iter((function (p) {
            var success = Curry._1(p, str);
            if (success.tag) {
              return /* () */0;
            } else {
              throw [
                    Done,
                    success
                  ];
            }
          }), stream);
    return /* Fail_ */Block.__(1, ["All the parsers failed."]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Done) {
      return exn[1];
    } else {
      throw exn;
    }
  }
}

var partial_arg = /* Some */[Regex$ReasonParse.intMapper];

function q(param) {
  return Combs$ReasonParse.map(partial_arg, /* None */0, Regex$ReasonParse.digits, param);
}

var partial_arg$1 = Stream.of_list(/* :: */[
      Regex$ReasonParse.letters,
      /* :: */[
        q,
        /* [] */0
      ]
    ]);

function porq(param) {
  return streamAlt(partial_arg$1, param);
}

console.log(Node$ReasonParse.stringOfResult(porq("*123abc")));

var p = Regex$ReasonParse.letters;

exports.Done = Done;
exports.streamAlt = streamAlt;
exports.p = p;
exports.q = q;
exports.porq = porq;
/* partial_arg Not a pure module */
