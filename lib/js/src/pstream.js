// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function hd(stream) {
  try {
    return /* Some */[Stream.next(stream)];
  }
  catch (exn){
    return /* None */0;
  }
}

function reduce(reducer, _acc, stream) {
  while(true) {
    var acc = _acc;
    var match = hd(stream);
    if (match) {
      _acc = Curry._2(reducer, acc, match[0]);
      continue ;
      
    } else {
      return acc;
    }
  };
}

function Comb() {
  var Break = Caml_exceptions.create("Pstream-ReasonParse.Comb(B).Break");
  var alt = function (ps, s) {
    var stream = Stream.of_list(ps);
    var f = function (acc, p) {
      try {
        var match = Curry._1(p, s);
        if (match[0] >= 781116926) {
          return acc;
        } else {
          var match$1 = match[1];
          throw [
                Break,
                match$1[0],
                match$1[1]
              ];
        }
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Break) {
          return /* `Success */[
                  94326179,
                  /* tuple */[
                    exn[1],
                    exn[2]
                  ]
                ];
        } else {
          throw exn;
        }
      }
    };
    return reduce(f, /* `Fail */[
                781116926,
                /* :: */[
                  "alt `Failed: none of the parsers matched.",
                  /* [] */0
                ]
              ], stream);
  };
  var ParseFailure = Caml_exceptions.create("Pstream-ReasonParse.Comb(B).ParseFailure");
  var tillFailure = function (stream, string) {
    var f = function (param, parser) {
      var list = param[0];
      var s = list ? list[0][1][1][/* remainder */1] : string;
      var success = Curry._1(parser, s);
      if (success[0] >= 781116926) {
        throw [
              ParseFailure,
              list,
              /* Some */[success]
            ];
      } else {
        return /* tuple */[
                /* :: */[
                  success,
                  list
                ],
                /* None */0
              ];
      }
    };
    try {
      return reduce(f, /* tuple */[
                  /* [] */0,
                  /* None */0
                ], stream);
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === ParseFailure) {
        return /* tuple */[
                exn[1],
                exn[2]
              ];
      } else {
        throw exn;
      }
    }
  };
  var mergeParseData = function (name, initialString, list) {
    if (list) {
      var x = list[0];
      return /* record */[
              /* match */mergeParseData(name, initialString, list[1])[/* match */0] + x[/* match */0],
              /* remainder */x[/* remainder */1],
              /* name */x[/* name */2]
            ];
    } else {
      return /* record */[
              /* match */"",
              /* remainder */initialString,
              /* name */name
            ];
    }
  };
  var tillFailureMerged = function (name, stream, string) {
    var match = tillFailure(stream, string);
    var match$1 = List.split(List.map((function (param) {
                var match = param[1];
                return /* tuple */[
                        match[0],
                        match[1]
                      ];
              }), match[0]));
    return /* tuple */[
            List.rev(match$1[0]),
            mergeParseData(name, string, match$1[1]),
            match[1]
          ];
  };
  var stream = function (name, stream$1, string) {
    var match = tillFailureMerged(name, stream$1, string);
    var match$1 = match[2];
    if (match$1) {
      return /* `Fail */[
              781116926,
              /* :: */[
                Curry._1(Format.sprintf(/* Format */[
                          /* String_literal */Block.__(11, [
                              "Parser `Stream failure at parser index ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ]),
                          "Parser `Stream failure at parser index %d"
                        ]), Stream.count(stream$1)),
                match$1[0][1]
              ]
            ];
    } else {
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `List */[
                  848054398,
                  match[0]
                ],
                match[1]
              ]
            ];
    }
  };
  var seq = function (name, ps) {
    var partial_arg = Stream.of_list(ps);
    return (function (param) {
        return stream(name, partial_arg, param);
      });
  };
  var addRange = function (list) {
    return List.mapi((function (i, a) {
                  return /* tuple */[
                          i,
                          a
                        ];
                }), list);
  };
  var filteri = function (predicate, list) {
    return List.map((function (prim) {
                  return prim[1];
                }), List.filter((function (param) {
                        return Curry._2(predicate, param[0], param[1]);
                      }))(addRange(list)));
  };
  var keep = function ($staropt$star, indices, ps, s) {
    var name = $staropt$star ? $staropt$star[0] : "keep";
    var partial_arg = Stream.of_list(ps);
    var fail = (function (param) {
          return stream(name, partial_arg, param);
        })(s);
    if (typeof fail === "number") {
      return fail;
    } else if (fail[0] !== 94326179) {
      return fail;
    } else {
      var match = fail[1];
      var match$1 = match[0];
      if (typeof match$1 === "number") {
        return fail;
      } else if (match$1[0] !== 848054398) {
        return fail;
      } else {
        var filteredList = filteri((function (i, _) {
                return List.mem(i, indices);
              }), match$1[1]);
        return /* `Success */[
                94326179,
                /* tuple */[
                  /* `List */[
                    848054398,
                    filteredList
                  ],
                  match[1]
                ]
              ];
      }
    }
  };
  var keepNth = function ($staropt$star, n) {
    var name = $staropt$star ? $staropt$star[0] : "keepNth";
    var partial_arg = /* :: */[
      n,
      /* [] */0
    ];
    var partial_arg$1 = /* Some */[name];
    return (function (param, param$1) {
        return keep(partial_arg$1, partial_arg, param, param$1);
      });
  };
  var keepFirst = function ($staropt$star) {
    var name = $staropt$star ? $staropt$star[0] : "keepFirts";
    return keepNth(/* Some */[name], 0);
  };
  var keepLast = function ($staropt$star, ps) {
    var name = $staropt$star ? $staropt$star[0] : "keepLast";
    var partial_arg = keepNth(/* Some */[name], List.length(ps) - 1 | 0);
    return (function (param) {
        return partial_arg(ps, param);
      });
  };
  var between = function ($staropt$star, p, q, r) {
    var name = $staropt$star ? $staropt$star[0] : "between";
    var partial_arg_001 = /* :: */[
      q,
      /* :: */[
        r,
        /* [] */0
      ]
    ];
    var partial_arg = /* :: */[
      p,
      partial_arg_001
    ];
    var partial_arg$1 = keepNth(/* Some */[name], 1);
    return (function (param) {
        return partial_arg$1(partial_arg, param);
      });
  };
  var successes = function ($staropt$star, $staropt$star$1, stream, string) {
    var name = $staropt$star ? $staropt$star[0] : "successes";
    var atLeast = $staropt$star$1 ? $staropt$star$1[0] : 0;
    var match = tillFailureMerged(name, stream, string);
    var failOpt = match[2];
    var pRec = match[1];
    var values = match[0];
    var n = List.length(values);
    if (failOpt) {
      var match$1 = +(n >= atLeast);
      if (match$1 !== 0) {
        return /* `Success */[
                94326179,
                /* tuple */[
                  /* `List */[
                    848054398,
                    values
                  ],
                  pRec
                ]
              ];
      } else {
        return /* `Fail */[
                781116926,
                /* :: */[
                  "Parse failed too soon",
                  failOpt[0][1]
                ]
              ];
      }
    } else {
      var match$2 = +(n >= atLeast);
      if (match$2 !== 0) {
        return /* `Success */[
                94326179,
                /* tuple */[
                  /* `List */[
                    848054398,
                    values
                  ],
                  pRec
                ]
              ];
      } else {
        return /* `Fail */[
                781116926,
                /* :: */[
                  "Stream ended too soon.",
                  /* [] */0
                ]
              ];
      }
    }
  };
  var _times = function ($staropt$star, atMost, parser) {
    var atLeast = $staropt$star ? $staropt$star[0] : 0;
    var partial_arg = Stream.from((function (n) {
            if (atMost) {
              if (n < atMost[0]) {
                return /* Some */[parser];
              } else {
                return /* None */0;
              }
            } else {
              return /* Some */[parser];
            }
          }));
    var partial_arg$1 = /* Some */[atLeast];
    return (function (param) {
        return successes(/* None */0, partial_arg$1, partial_arg, param);
      });
  };
  var zeroOrMore = function (parser) {
    return _times(/* Some */[0], /* None */0, parser);
  };
  var oneOrMore = function (parser) {
    return _times(/* Some */[1], /* None */0, parser);
  };
  var atLeast = function (atLeast$1, parser) {
    return _times(/* Some */[atLeast$1], /* None */0, parser);
  };
  var atMost = function (atMost$1) {
    var partial_arg = /* Some */[atMost$1];
    var partial_arg$1 = /* Some */[0];
    return (function (param) {
        return _times(partial_arg$1, partial_arg, param);
      });
  };
  var atLeastAtMost = function (atLeast, atMost) {
    var partial_arg = /* Some */[atMost];
    var partial_arg$1 = /* Some */[atLeast];
    return (function (param) {
        return _times(partial_arg$1, partial_arg, param);
      });
  };
  var nTimes = function (n) {
    return atLeastAtMost(n, n);
  };
  return /* module */[
          /* Break */Break,
          /* alt */alt,
          /* ParseFailure */ParseFailure,
          /* tillFailure */tillFailure,
          /* mergeParseData */mergeParseData,
          /* tillFailureMerged */tillFailureMerged,
          /* stream */stream,
          /* seq */seq,
          /* addRange */addRange,
          /* filteri */filteri,
          /* keep */keep,
          /* keepNth */keepNth,
          /* keepFirst */keepFirst,
          /* keepLast */keepLast,
          /* between */between,
          /* successes */successes,
          /* _times */_times,
          /* zeroOrMore */zeroOrMore,
          /* oneOrMore */oneOrMore,
          /* atLeast */atLeast,
          /* atMost */atMost,
          /* atLeastAtMost */atLeastAtMost,
          /* nTimes */nTimes
        ];
}

exports.hd = hd;
exports.reduce = reduce;
exports.Comb = Comb;
/* Format Not a pure module */
