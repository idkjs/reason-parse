// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function hd(stream) {
  try {
    return /* Some */[Stream.next(stream)];
  }
  catch (exn){
    return /* None */0;
  }
}

function reduce(reducer, _acc, stream) {
  while(true) {
    var acc = _acc;
    var match = hd(stream);
    if (match) {
      _acc = Curry._2(reducer, acc, match[0]);
      continue ;
      
    } else {
      return acc;
    }
  };
}

var Break = Caml_exceptions.create("Pstream-ReasonParse.Break");

function alt(ps, s) {
  var stream = Stream.of_list(ps);
  var f = function (acc, p) {
    try {
      var success = Curry._1(p, s);
      if (success.tag) {
        return acc;
      } else {
        throw [
              Break,
              success
            ];
      }
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Break) {
        return exn[1];
      } else {
        throw exn;
      }
    }
  };
  return reduce(f, /* Fail */Block.__(1, ["alt failed: none of the parsers matched."]), stream);
}

var ParseFailureExn = Caml_exceptions.create("Pstream-ReasonParse.ParseFailureExn");

function tillFailure(stream, string) {
  var f = function (param, parser) {
    var rest = param[1];
    var list = param[0];
    var match = Curry._1(parser, rest);
    if (match.tag) {
      throw [
            ParseFailureExn,
            list,
            rest,
            match[0]
          ];
    } else {
      var parseData = match[1];
      return /* tuple */[
              /* :: */[
                /* tuple */[
                  match[0],
                  parseData
                ],
                list
              ],
              parseData[/* rest */1]
            ];
    }
  };
  try {
    var match = reduce(f, /* tuple */[
          /* [] */0,
          string
        ], stream);
    return /* tuple */[
            match[0],
            match[1],
            /* EndOfStream */Block.__(0, [Stream.count(stream)])
          ];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === ParseFailureExn) {
      return /* tuple */[
              exn[1],
              exn[2],
              /* ParseFailure */Block.__(1, [
                  Stream.count(stream),
                  exn[3]
                ])
            ];
    } else {
      throw exn;
    }
  }
}

function mergeParseData($staropt$star, initialString, list) {
  var parserName = $staropt$star ? $staropt$star[0] : /* None */0;
  if (list) {
    var x = list[0];
    return /* record */[
            /* match */mergeParseData(/* Some */[parserName], initialString, list[1])[/* match */0] + x[/* match */0],
            /* rest */x[/* rest */1],
            /* parserName */x[/* parserName */2]
          ];
  } else {
    return /* record */[
            /* match */"",
            /* rest */initialString,
            /* parserName */parserName
          ];
  }
}

function seq(ps, s) {
  var match = tillFailure(Stream.of_list(ps), s);
  var match$1 = match[2];
  if (match$1.tag) {
    return /* Fail */Block.__(1, [Curry._3(Format.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Parser ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " of ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " failed: ",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "Parser %d of %d failed: %s"
                      ]), match$1[0], List.length(ps), match$1[1])]);
  } else {
    var match$2 = List.split(match[0]);
    return /* Success */Block.__(0, [
              /* Lst */Block.__(3, [List.rev(match$2[0])]),
              mergeParseData(/* None */0, s, match$2[1])
            ]);
  }
}

function _times($staropt$star, atMost, parser, string) {
  var atLeast = $staropt$star ? $staropt$star[0] : 0;
  var stream = Stream.from((function (n) {
          if (atMost) {
            if (n < atMost[0]) {
              return /* Some */[parser];
            } else {
              return /* None */0;
            }
          } else {
            return /* Some */[parser];
          }
        }));
  var match = tillFailure(stream, string);
  var list = match[0];
  if (List.length(list) >= atLeast) {
    console.log(Curry._2(Format.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "count: ",
                      /* Int */Block.__(4, [
                          /* Int_d */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* String_literal */Block.__(11, [
                              ", atLeast: ",
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ]),
                  "count: %d, atLeast: %d"
                ]), match[2][0], atLeast));
    var match$1 = List.split(list);
    return /* Success */Block.__(0, [
              /* Lst */Block.__(3, [List.rev(match$1[0])]),
              mergeParseData(/* None */0, string, match$1[1])
            ]);
  } else {
    return /* Fail */Block.__(1, [Curry._2(Format.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "Only ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " instance(s) matched. Needed to match at least ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " instance(s).",
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "Only %d instance(s) matched. Needed to match at least %d instance(s)."
                      ]), List.length(list), atLeast)]);
  }
}

function zeroOrMore(parser) {
  var partial_arg = /* Some */[0];
  return (function (param) {
      return _times(partial_arg, /* None */0, parser, param);
    });
}

function atLeast(atLeast$1, parser) {
  var partial_arg = /* Some */[atLeast$1];
  return (function (param) {
      return _times(partial_arg, /* None */0, parser, param);
    });
}

function atMost(atMost$1) {
  var partial_arg = /* Some */[atMost$1];
  var partial_arg$1 = /* Some */[0];
  return (function (param, param$1) {
      return _times(partial_arg$1, partial_arg, param, param$1);
    });
}

function times(atLeast, atMost) {
  var partial_arg = /* Some */[atMost];
  var partial_arg$1 = /* Some */[atLeast];
  return (function (param, param$1) {
      return _times(partial_arg$1, partial_arg, param, param$1);
    });
}

exports.hd = hd;
exports.reduce = reduce;
exports.Break = Break;
exports.alt = alt;
exports.ParseFailureExn = ParseFailureExn;
exports.tillFailure = tillFailure;
exports.mergeParseData = mergeParseData;
exports.seq = seq;
exports._times = _times;
exports.zeroOrMore = zeroOrMore;
exports.atLeast = atLeast;
exports.atMost = atMost;
exports.times = times;
/* Format Not a pure module */
