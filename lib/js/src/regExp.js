// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function regex(name, $staropt$star, re, s) {
  var group = $staropt$star ? $staropt$star[0] : 0;
  var resultOption = new RegExp("^" + re.source).exec(s);
  if (resultOption !== null) {
    var match = Belt_Array.get(resultOption, 0);
    var match$1 = Belt_Array.get(resultOption, group);
    if (match) {
      if (match$1) {
        var nullableValue = match$1[0];
        var nullableMatch = match[0];
        if (nullableMatch == null) {
          return /* `Fail */[
                  781116926,
                  /* :: */[
                    "Match not found -- capture group 0 is null.",
                    /* [] */0
                  ]
                ];
        } else if (nullableValue == null) {
          return /* `Fail */[
                  781116926,
                  /* :: */[
                    Curry._1(Format.sprintf(/* Format */[
                              /* String_literal */Block.__(11, [
                                  "Match not found -- capture group ",
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */Block.__(11, [
                                          " is null.",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ]),
                              "Match not found -- capture group %d is null."
                            ]), group),
                    /* [] */0
                  ]
                ];
        } else {
          return /* `Success */[
                  94326179,
                  /* tuple */[
                    /* `String */[
                      -976970511,
                      nullableValue
                    ],
                    /* record */[
                      /* match */nullableMatch,
                      /* remainder */s.slice(nullableMatch.length),
                      /* name */name ? name[0] : re.source
                    ]
                  ]
                ];
        }
      } else {
        return /* `Fail */[
                781116926,
                /* :: */[
                  Curry._1(Format.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "Capture group ",
                                /* Int */Block.__(4, [
                                    /* Int_d */0,
                                    /* No_padding */0,
                                    /* No_precision */0,
                                    /* String_literal */Block.__(11, [
                                        " is undefined.",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "Capture group %d is undefined."
                          ]), group),
                  /* [] */0
                ]
              ];
      }
    } else {
      return /* `Fail */[
              781116926,
              /* :: */[
                "Match not found -- captures array is empty.",
                /* [] */0
              ]
            ];
    }
  } else {
    return /* `Fail */[
            781116926,
            /* :: */[
              "Match not found -- exec `Failed.",
              /* [] */0
            ]
          ];
  }
}

var partial_arg = (/\s*/);

function maybeWhitespace(param) {
  return regex(/* None */0, /* None */0, partial_arg, param);
}

function string(s) {
  var partial_arg = new RegExp(s);
  return (function (param) {
      return regex(/* None */0, /* None */0, partial_arg, param);
    });
}

var partial_arg$1 = (/\d/);

function digit(param) {
  return regex(/* None */0, /* None */0, partial_arg$1, param);
}

var partial_arg$2 = (/\d+/);

function digits(param) {
  return regex(/* None */0, /* None */0, partial_arg$2, param);
}

var partial_arg$3 = (/[a-zA-Z]/);

function letter(param) {
  return regex(/* None */0, /* None */0, partial_arg$3, param);
}

var partial_arg$4 = (/[a-zA-Z]+/);

function letters(param) {
  return regex(/* None */0, /* None */0, partial_arg$4, param);
}

function intMapper(param) {
  return /* `Integer */[
          -462625378,
          param[1]
        ];
}

function floatMapper(param) {
  return /* `Float */[
          365180284,
          param[1]
        ];
}

function mapResult(f, result) {
  if (result[0] >= 781116926) {
    return result;
  } else {
    var match = result[1];
    return /* `Success */[
            94326179,
            /* tuple */[
              Curry._1(f, match[0]),
              match[1]
            ]
          ];
  }
}

function map(f, p, s) {
  return mapResult(f, Curry._1(p, s));
}

var partial_arg$5 = (/\d+\.\d+/);

function partial_arg$6(param) {
  return regex(/* None */0, /* None */0, partial_arg$5, param);
}

function $$float(param) {
  return mapResult(floatMapper, Curry._1(partial_arg$6, param));
}

exports.regex = regex;
exports.maybeWhitespace = maybeWhitespace;
exports.string = string;
exports.digit = digit;
exports.digits = digits;
exports.letter = letter;
exports.letters = letters;
exports.intMapper = intMapper;
exports.floatMapper = floatMapper;
exports.mapResult = mapResult;
exports.map = map;
exports.$$float = $$float;
/* partial_arg Not a pure module */
