// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Node$ReasonParse = require("./node.js");
var Regex$ReasonParse = require("./regex.js");
var Pstream$ReasonParse = require("./pstream.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function trim(p) {
  return Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p, Regex$ReasonParse.maybeWhitespace);
}

var partial_arg = (/{/);

function p(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg, param);
}

var lBrace = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p, Regex$ReasonParse.maybeWhitespace);

var partial_arg$1 = (/}/);

function p$1(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$1, param);
}

var rBrace = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p$1, Regex$ReasonParse.maybeWhitespace);

var partial_arg$2 = (/\[/);

function p$2(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$2, param);
}

var lBrak = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p$2, Regex$ReasonParse.maybeWhitespace);

var partial_arg$3 = (/]/);

function p$3(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$3, param);
}

var rBrak = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p$3, Regex$ReasonParse.maybeWhitespace);

var partial_arg$4 = (/:/);

function p$4(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$4, param);
}

var colon = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p$4, Regex$ReasonParse.maybeWhitespace);

var partial_arg$5 = (/,/);

function p$5(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$5, param);
}

var comma = Pstream$ReasonParse.between(Regex$ReasonParse.maybeWhitespace, p$5, Regex$ReasonParse.maybeWhitespace);

var partial_arg$6 = /* Some */[Regex$ReasonParse.intMapper];

function integer(param) {
  return Regex$ReasonParse.map(partial_arg$6, /* None */0, Regex$ReasonParse.digits, param);
}

var partial_arg$7 = (/"([^"]*)"/);

var partial_arg$8 = /* Some */[1];

function quotedString(param) {
  return Regex$ReasonParse.regex(partial_arg$8, partial_arg$7, param);
}

function firstChar(s) {
  try {
    return /* Some */[Caml_string.get(s, 0)];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function matchArray(s) {
  return Pstream$ReasonParse.between(lBrak, matchEntries, rBrak)(s);
}

function matchEntries(s) {
  return Pstream$ReasonParse.sepBy(comma, matchValue, s);
}

function matchValue(s) {
  return Pstream$ReasonParse.alt(/* :: */[
              integer,
              /* :: */[
                quotedString,
                /* :: */[
                  matchArray,
                  /* [] */0
                ]
              ]
            ], s);
}

console.log(Node$ReasonParse.stringOfResult(matchArray("\n\n  [\n    123, \"a\" ,\n [\n   [\n   3,\"bcd\"]]   , [5,6],\n\n \"pqrst\"]")));

exports.trim = trim;
exports.lBrace = lBrace;
exports.rBrace = rBrace;
exports.lBrak = lBrak;
exports.rBrak = rBrak;
exports.colon = colon;
exports.comma = comma;
exports.integer = integer;
exports.quotedString = quotedString;
exports.firstChar = firstChar;
exports.matchArray = matchArray;
exports.matchEntries = matchEntries;
exports.matchValue = matchValue;
/* partial_arg Not a pure module */
