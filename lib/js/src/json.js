// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Node$ReasonParse = require("./node.js");
var Regex$ReasonParse = require("./regex.js");
var Pstream$ReasonParse = require("./pstream.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var partial_arg = (/{/);

function lBrace(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg, param);
}

var partial_arg$1 = (/}/);

function rBrace(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$1, param);
}

var partial_arg$2 = (/\[/);

function lBrak(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$2, param);
}

var partial_arg$3 = (/]/);

function rBrak(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$3, param);
}

var partial_arg$4 = (/:/);

function colon(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$4, param);
}

var partial_arg$5 = (/,/);

function comma(param) {
  return Regex$ReasonParse.regex(/* None */0, partial_arg$5, param);
}

var partial_arg$6 = (/"([^"]*)"/);

var partial_arg$7 = /* Some */[1];

function quotedString(param) {
  return Regex$ReasonParse.regex(partial_arg$7, partial_arg$6, param);
}

function firstChar(s) {
  try {
    return /* Some */[Caml_string.get(s, 0)];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function matchArray(s) {
  return Pstream$ReasonParse.between(lBrak, matchEntries, rBrak)(s);
}

function matchEntries(s) {
  return Pstream$ReasonParse.sepBy(comma, matchEntry, s);
}

function matchEntry(s) {
  return Pstream$ReasonParse.alt(/* :: */[
              Regex$ReasonParse.integer,
              /* :: */[
                quotedString,
                /* :: */[
                  matchArray,
                  /* [] */0
                ]
              ]
            ], s);
}

console.log(Node$ReasonParse.stringOfResult(matchArray("[123,\"a\",[[3,\"bcd\"]],[5,6],\"pqrst\"]")));

exports.lBrace = lBrace;
exports.rBrace = rBrace;
exports.lBrak = lBrak;
exports.rBrak = rBrak;
exports.colon = colon;
exports.comma = comma;
exports.quotedString = quotedString;
exports.firstChar = firstChar;
exports.matchArray = matchArray;
exports.matchEntries = matchEntries;
exports.matchEntry = matchEntry;
/* partial_arg Not a pure module */
