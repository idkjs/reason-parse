// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");

function $$const(length, a) {
  if (length) {
    var n = length[0];
    if (n) {
      if (n < 0) {
        return Js_exn.raiseRangeError("List length must be nonnegative.");
      } else {
        return /* Cons */[
                a,
                (function () {
                    return $$const(/* Some */[n - 1 | 0], a);
                  })
              ];
      }
    } else {
      return /* Nil */0;
    }
  } else {
    return /* Cons */[
            a,
            (function () {
                return $$const(/* None */0, a);
              })
          ];
  }
}

function $at$at(x, xs) {
  return /* Cons */[
          x,
          (function () {
              return xs;
            })
        ];
}

function posInts(n) {
  if (n < 0) {
    return /* Nil */0;
  } else {
    return /* Cons */[
            n,
            (function () {
                return posInts(n + 1 | 0);
              })
          ];
  }
}

function fromList(lst) {
  if (lst) {
    var xs = lst[1];
    return /* Cons */[
            lst[0],
            (function () {
                return fromList(xs);
              })
          ];
  } else {
    return /* Nil */0;
  }
}

function toList(n, llst) {
  if (llst) {
    var match = +(n > 0);
    if (match !== 0) {
      return /* :: */[
              llst[0],
              toList(n - 1 | 0, Curry._1(llst[1], /* () */0))
            ];
    } else {
      return /* [] */0;
    }
  } else {
    return /* [] */0;
  }
}

console.log($$Array.of_list(toList(20, posInts(5))));

var xs = posInts(1);

function xs_001() {
  return xs;
}

var xs$1 = /* Cons */[
  0,
  xs_001
];

function xs_001$1() {
  return xs$1;
}

var xs$2 = /* Cons */[
  1,
  xs_001$1
];

function xs_001$2() {
  return xs$2;
}

var xs$3 = /* Cons */[
  2,
  xs_001$2
];

function ll_001() {
  return xs$3;
}

var ll = /* Cons */[
  3,
  ll_001
];

console.log($$Array.of_list(toList(5, ll)));

console.log($$Array.of_list(toList(5, fromList(/* :: */[
                  2,
                  /* :: */[
                    4,
                    /* :: */[
                      6,
                      /* :: */[
                        8,
                        /* [] */0
                      ]
                    ]
                  ]
                ]))));

var toLazy = fromList;

exports.$$const = $$const;
exports.$at$at = $at$at;
exports.posInts = posInts;
exports.fromList = fromList;
exports.toLazy = toLazy;
exports.toList = toList;
exports.ll = ll;
/*  Not a pure module */
