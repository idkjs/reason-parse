// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function nextOpt(stream) {
  try {
    return /* Some */[Stream.next(stream)];
  }
  catch (exn){
    if (exn === Stream.Failure) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function altStream(parserStream, charStream) {
  while(true) {
    var match = nextOpt(parserStream);
    if (match) {
      var success = Curry._1(match[0], charStream);
      if (success[0] >= 781116926) {
        continue ;
        
      } else {
        return success;
      }
    } else {
      return /* `Fail */[
              781116926,
              "None of the parsers matched."
            ];
    }
  };
}

function alt(_parsers, charStream) {
  while(true) {
    var parsers = _parsers;
    if (parsers) {
      var success = Curry._1(parsers[0], charStream);
      if (success[0] >= 781116926) {
        _parsers = parsers[1];
        continue ;
        
      } else {
        return success;
      }
    } else {
      return /* `Fail */[
              781116926,
              "None of the parsers matched."
            ];
    }
  };
}

function tillFailure(parserStream, charStream) {
  var match = nextOpt(parserStream);
  if (match) {
    var fail = Curry._1(match[0], charStream);
    if (fail[0] >= 781116926) {
      return /* tuple */[
              /* [] */0,
              /* Some */[/* `ParseFailure */[
                  954667127,
                  fail
                ]],
              charStream
            ];
    } else {
      var match$1 = fail[1];
      var match$2 = tillFailure(parserStream, match$1[1]);
      return /* tuple */[
              /* :: */[
                match$1[0],
                match$2[0]
              ],
              match$2[1],
              match$2[2]
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* Some */[/* StreamFailure */-724409462],
            charStream
          ];
  }
}

function tillFailureWrapped(parserStream, charStream) {
  var match = tillFailure(parserStream, charStream);
  var match$1 = match[1];
  if (match$1) {
    return /* tuple */[
            match[0],
            match$1[0],
            match[2]
          ];
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "comb.re",
            41,
            20
          ]
        ];
  }
}

function stream(parserStream, charStream) {
  var match = tillFailureWrapped(parserStream, charStream);
  var match$1 = match[1];
  if (typeof match$1 === "number") {
    return /* `Success */[
            94326179,
            /* tuple */[
              /* `List */[
                848054398,
                match[0]
              ],
              match[2]
            ]
          ];
  } else {
    var message = Curry._2(Format.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Parser ",
                  /* Int */Block.__(4, [
                      /* Int_d */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* String_literal */Block.__(11, [
                          " failed: ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ]),
              "Parser %d failed: %s"
            ]), Stream.count(parserStream), match$1[1][1]);
    return /* `Fail */[
            781116926,
            message
          ];
  }
}

function seq(parsers) {
  var partial_arg = Stream.of_list(parsers);
  return (function (param) {
      return stream(partial_arg, param);
    });
}

function atLeastStream(n, parserStream, charStream) {
  var match = tillFailureWrapped(parserStream, charStream);
  var successes = match[0];
  if (List.length(successes) >= n) {
    return /* `Success */[
            94326179,
            /* tuple */[
              /* `List */[
                848054398,
                successes
              ],
              match[2]
            ]
          ];
  } else {
    return /* `Fail */[
            781116926,
            Curry._2(Format.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Only ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  " of ",
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */Block.__(11, [
                                          " matches found.",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "Only %d of %d matches found."
                    ]), List.length(successes), n)
          ];
  }
}

function many($staropt$star, atMost, parser) {
  var atLeast = $staropt$star ? $staropt$star[0] : 0;
  var partial_arg = Stream.from((function (n) {
          if (atMost) {
            if (n < atMost[0]) {
              return /* Some */[parser];
            } else {
              return /* None */0;
            }
          } else {
            return /* Some */[parser];
          }
        }));
  return (function (param) {
      return atLeastStream(atLeast, partial_arg, param);
    });
}

function appendRange(list) {
  return List.mapi((function (i, a) {
                return /* tuple */[
                        i,
                        a
                      ];
              }), list);
}

function filteri(predicate, list) {
  return List.map((function (prim) {
                return prim[1];
              }), List.filter((function (param) {
                      return Curry._2(predicate, param[0], param[1]);
                    }))(appendRange(list)));
}

function keep(indices, ps, s) {
  var partial_arg = Stream.of_list(ps);
  var fail = (function (param) {
        return stream(partial_arg, param);
      })(s);
  if (typeof fail === "number") {
    return fail;
  } else if (fail[0] !== 94326179) {
    return fail;
  } else {
    var match = fail[1];
    var match$1 = match[0];
    if (typeof match$1 === "number") {
      return fail;
    } else if (match$1[0] !== 848054398) {
      return fail;
    } else {
      var filteredList = filteri((function (i, _) {
              return List.mem(i, indices);
            }), match$1[1]);
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `List */[
                  848054398,
                  filteredList
                ],
                match[1]
              ]
            ];
    }
  }
}

function keepNth(n, ps, s) {
  var f = keep(/* :: */[
        n,
        /* [] */0
      ], ps, s);
  if (f[0] >= 781116926) {
    return f;
  } else {
    var match = f[1];
    var filteredList = match[0][1];
    if (filteredList) {
      if (filteredList[1]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "comb.re",
                102,
                11
              ]
            ];
      } else {
        return /* `Success */[
                94326179,
                /* tuple */[
                  filteredList[0],
                  match[1]
                ]
              ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "comb.re",
              102,
              11
            ]
          ];
    }
  }
}

function keepFirst(ps) {
  return (function (param) {
      return keepNth(0, ps, param);
    });
}

function keepLast(ps) {
  var partial_arg = List.length(ps) - 1 | 0;
  return (function (param) {
      return keepNth(partial_arg, ps, param);
    });
}

function between(p, q, r) {
  var partial_arg_001 = /* :: */[
    q,
    /* :: */[
      r,
      /* [] */0
    ]
  ];
  var partial_arg = /* :: */[
    p,
    partial_arg_001
  ];
  return (function (param) {
      return keepNth(1, partial_arg, param);
    });
}

function sepBy(separator, parser, string) {
  var stream = Stream.from((function (n) {
          var match = +(n === 0);
          if (match !== 0) {
            return /* Some */[parser];
          } else {
            return /* Some */[keepLast(/* :: */[
                          separator,
                          /* :: */[
                            parser,
                            /* [] */0
                          ]
                        ])];
          }
        }));
  return atLeastStream(0, stream, string);
}

function stringOfStringList(lst) {
  return "[" + ($$Array.of_list(lst).join(", ") + "]");
}

function stringOfCharList(lst) {
  return stringOfStringList(List.map(Char.escaped, lst));
}

function stringOfValue(v) {
  var variant = v[0];
  if (variant >= -319464051) {
    if (variant >= 848054398) {
      return stringOfStringList(List.map(stringOfValue, v[1]));
    } else {
      return Pervasives.string_of_int(v[1]);
    }
  } else if (variant >= -677568250) {
    return Char.escaped(v[1]);
  } else {
    return v[1];
  }
}

function stringOfResult(result) {
  if (result[0] >= 781116926) {
    return Curry._1(Format.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "fail!\n",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "fail!\n%s"
                  ]), result[1]);
  } else {
    var match = result[1];
    return Curry._2(Format.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "\nsuccess!\nvalue: ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ", rest: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "\nsuccess!\nvalue: %s, rest: %s\n"
                  ]), stringOfValue(match[0]), match[1]);
  }
}

exports.nextOpt = nextOpt;
exports.altStream = altStream;
exports.alt = alt;
exports.tillFailure = tillFailure;
exports.tillFailureWrapped = tillFailureWrapped;
exports.stream = stream;
exports.seq = seq;
exports.atLeastStream = atLeastStream;
exports.many = many;
exports.appendRange = appendRange;
exports.filteri = filteri;
exports.keep = keep;
exports.keepNth = keepNth;
exports.keepFirst = keepFirst;
exports.keepLast = keepLast;
exports.between = between;
exports.sepBy = sepBy;
exports.stringOfStringList = stringOfStringList;
exports.stringOfCharList = stringOfCharList;
exports.stringOfValue = stringOfValue;
exports.stringOfResult = stringOfResult;
/* Format Not a pure module */
