// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var LazyList$ReasonParse = require("./lazyList.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function alt(_parsers, charStream) {
  while(true) {
    var parsers = _parsers;
    if (parsers) {
      var success = Curry._1(parsers[0], charStream);
      if (success[0] >= 781116926) {
        _parsers = Curry._1(parsers[1], /* () */0);
        continue ;
        
      } else {
        return success;
      }
    } else {
      return /* `Fail */[
              781116926,
              "None of the parsers matched."
            ];
    }
  };
}

function tillFailure(parsers, charStream) {
  if (parsers) {
    var fail = Curry._1(parsers[0], charStream);
    if (fail[0] >= 781116926) {
      return /* tuple */[
              /* [] */0,
              /* Some */[/* `ParseFailure */[
                  954667127,
                  fail
                ]],
              charStream
            ];
    } else {
      var match = fail[1];
      var match$1 = tillFailure(Curry._1(parsers[1], /* () */0), match[1]);
      return /* tuple */[
              /* :: */[
                match[0],
                match$1[0]
              ],
              match$1[1],
              match$1[2]
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* Some */[/* StreamFailure */-724409462],
            charStream
          ];
  }
}

function tillFailureWrapped(parsers, charStream) {
  var match = tillFailure(parsers, charStream);
  var match$1 = match[1];
  if (match$1) {
    return /* tuple */[
            match[0],
            match$1[0],
            match[2]
          ];
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "combLazy.re",
            28,
            20
          ]
        ];
  }
}

function seq(parsers, charStream) {
  var match = tillFailureWrapped(parsers, charStream);
  var match$1 = match[1];
  var successes = match[0];
  if (typeof match$1 === "number") {
    return /* `Success */[
            94326179,
            /* tuple */[
              /* `List */[
                848054398,
                successes
              ],
              match[2]
            ]
          ];
  } else {
    var message = Curry._2(Format.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Parser ",
                  /* Int */Block.__(4, [
                      /* Int_d */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* String_literal */Block.__(11, [
                          " failed: ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ]),
              "Parser %d failed: %s"
            ]), List.length(successes), match$1[1][1]);
    return /* `Fail */[
            781116926,
            message
          ];
  }
}

function atLeast(n, parsers, charStream) {
  var match = tillFailureWrapped(parsers, charStream);
  var successes = match[0];
  if (List.length(successes) >= n) {
    return /* `Success */[
            94326179,
            /* tuple */[
              /* `List */[
                848054398,
                successes
              ],
              match[2]
            ]
          ];
  } else {
    return /* `Fail */[
            781116926,
            Curry._2(Format.sprintf(/* Format */[
                      /* String_literal */Block.__(11, [
                          "Only ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  " of ",
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */Block.__(11, [
                                          " matches found.",
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "Only %d of %d matches found."
                    ]), List.length(successes), n)
          ];
  }
}

function many($staropt$star, max, parser) {
  var min = $staropt$star ? $staropt$star[0] : 0;
  if (max) {
    var partial_arg = LazyList$ReasonParse.$$const(/* Some */[max[0]], parser);
    return (function (param) {
        return atLeast(min, partial_arg, param);
      });
  } else {
    var partial_arg$1 = LazyList$ReasonParse.$$const(/* None */0, parser);
    return (function (param) {
        return atLeast(min, partial_arg$1, param);
      });
  }
}

function appendRange(list) {
  return List.mapi((function (i, a) {
                return /* tuple */[
                        i,
                        a
                      ];
              }), list);
}

function filteri(predicate, list) {
  return List.map((function (prim) {
                return prim[1];
              }), List.filter((function (param) {
                      return Curry._2(predicate, param[0], param[1]);
                    }))(appendRange(list)));
}

function keep(indices, ps, s) {
  var fail = seq(ps, s);
  if (typeof fail === "number") {
    return fail;
  } else if (fail[0] !== 94326179) {
    return fail;
  } else {
    var match = fail[1];
    var match$1 = match[0];
    if (typeof match$1 === "number") {
      return fail;
    } else if (match$1[0] !== 848054398) {
      return fail;
    } else {
      var filteredList = filteri((function (i, _) {
              return List.mem(i, indices);
            }), match$1[1]);
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `List */[
                  848054398,
                  filteredList
                ],
                match[1]
              ]
            ];
    }
  }
}

function keepNth(n, ps, s) {
  var f = keep(/* :: */[
        n,
        /* [] */0
      ], ps, s);
  if (f[0] >= 781116926) {
    return f;
  } else {
    var match = f[1];
    var filteredList = match[0][1];
    if (filteredList) {
      if (filteredList[1]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "combLazy.re",
                76,
                11
              ]
            ];
      } else {
        return /* `Success */[
                94326179,
                /* tuple */[
                  filteredList[0],
                  match[1]
                ]
              ];
      }
    } else {
      throw [
            Caml_builtin_exceptions.assert_failure,
            [
              "combLazy.re",
              76,
              11
            ]
          ];
    }
  }
}

function keepFirst(ps) {
  return (function (param) {
      return keepNth(0, ps, param);
    });
}

function keepLast(ps) {
  var partial_arg = LazyList$ReasonParse.toLazy(ps);
  var partial_arg$1 = List.length(ps) - 1 | 0;
  return (function (param) {
      return keepNth(partial_arg$1, partial_arg, param);
    });
}

function between(p, q, r) {
  var partial_arg = LazyList$ReasonParse.toLazy(/* :: */[
        p,
        /* :: */[
          q,
          /* :: */[
            r,
            /* [] */0
          ]
        ]
      ]);
  return (function (param) {
      return keepNth(1, partial_arg, param);
    });
}

function sepBy(separator, parser, string) {
  return atLeast(0, /* Cons */[
              parser,
              (function () {
                  return LazyList$ReasonParse.$$const(/* None */0, keepLast(/* :: */[
                                  separator,
                                  /* :: */[
                                    parser,
                                    /* [] */0
                                  ]
                                ]));
                })
            ], string);
}

function stringOfStringList(lst) {
  return "[" + ($$Array.of_list(lst).join(", ") + "]");
}

function stringOfCharList(lst) {
  return stringOfStringList(List.map(Char.escaped, lst));
}

function stringOfValue(v) {
  var variant = v[0];
  if (variant >= -319464051) {
    if (variant >= 848054398) {
      return stringOfStringList(List.map(stringOfValue, v[1]));
    } else {
      return Pervasives.string_of_int(v[1]);
    }
  } else if (variant >= -677568250) {
    return Char.escaped(v[1]);
  } else {
    return v[1];
  }
}

function stringOfResult(result) {
  if (result[0] >= 781116926) {
    return Curry._1(Format.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "fail!\n",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "fail!\n%s"
                  ]), result[1]);
  } else {
    var match = result[1];
    return Curry._2(Format.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "\nsuccess!\nvalue: ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                ", rest: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "\n" */10,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "\nsuccess!\nvalue: %s, rest: %s\n"
                  ]), stringOfValue(match[0]), match[1]);
  }
}

exports.alt = alt;
exports.tillFailure = tillFailure;
exports.tillFailureWrapped = tillFailureWrapped;
exports.seq = seq;
exports.atLeast = atLeast;
exports.many = many;
exports.appendRange = appendRange;
exports.filteri = filteri;
exports.keep = keep;
exports.keepNth = keepNth;
exports.keepFirst = keepFirst;
exports.keepLast = keepLast;
exports.between = between;
exports.sepBy = sepBy;
exports.stringOfStringList = stringOfStringList;
exports.stringOfCharList = stringOfCharList;
exports.stringOfValue = stringOfValue;
exports.stringOfResult = stringOfResult;
/* Format Not a pure module */
