// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function makeParseData(parserName, match_, rest, _) {
  return /* record */[
          /* match */match_,
          /* rest */rest,
          /* parserName */parserName
        ];
}

function stringOfParseData(param) {
  return Curry._2(Format.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Match: ",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* String_literal */Block.__(11, [
                              ", Rest: ",
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* End_of_format */0
                                ])
                            ])
                        ])
                    ]),
                  "Match: %s, Rest: %s"
                ]), param[/* match */0], param[/* rest */1]);
}

function stringOfParseDataList(parseDataList) {
  return $$Array.of_list(List.map(stringOfParseData, parseDataList)).join("\n");
}

function logParseData(parseData) {
  console.log(stringOfParseData(parseData));
  return /* () */0;
}

function stringOfValue(value) {
  if (typeof value === "number") {
    return "null";
  } else {
    switch (value.tag | 0) {
      case 0 : 
          return "\"" + (value[0] + "\"");
      case 1 : 
          return Pervasives.string_of_int(value[0]);
      case 2 : 
          return Pervasives.string_of_float(value[0]);
      case 3 : 
          return stringOfValueList(value[0]);
      case 4 : 
          return Js_exn.raiseError("I haven't gotten to that yet.");
      
    }
  }
}

function stringOfValueList(values) {
  return "[" + ($$Array.of_list(List.map(stringOfValue, values)).join(", ") + "]");
}

function stringOfResult(result) {
  if (result.tag) {
    return result[0];
  } else {
    return Curry._2(Format.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* Char_literal */Block.__(12, [
                            /* "\n" */10,
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s\n%s"
                  ]), stringOfValue(result[0]), stringOfParseData(result[1]));
  }
}

function stringOfNode(param) {
  var value = param[/* value */1];
  var name = param[/* name */0];
  if (name) {
    return Curry._2(Format.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* String_literal */Block.__(11, [
                            ", ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ])
                      ]),
                    "%s, %s"
                  ]), name[0], stringOfValue(value));
  } else {
    return Curry._1(Format.sprintf(/* Format */[
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* End_of_format */0
                      ]),
                    "%s"
                  ]), stringOfValue(value));
  }
}

exports.makeParseData = makeParseData;
exports.stringOfParseData = stringOfParseData;
exports.stringOfParseDataList = stringOfParseDataList;
exports.logParseData = logParseData;
exports.stringOfValue = stringOfValue;
exports.stringOfValueList = stringOfValueList;
exports.stringOfResult = stringOfResult;
exports.stringOfNode = stringOfNode;
/* Format Not a pure module */
