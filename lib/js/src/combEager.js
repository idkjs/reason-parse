// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var CombLazy$ReasonParse = require("./combLazy.js");
var LazyList$ReasonParse = require("./lazyList.js");

function alt(parsers) {
  var partial_arg = LazyList$ReasonParse.toLazy(parsers);
  return (function (param) {
      return CombLazy$ReasonParse.alt(partial_arg, param);
    });
}

function seq(parsers) {
  var partial_arg = LazyList$ReasonParse.toLazy(parsers);
  return (function (param) {
      return CombLazy$ReasonParse.seq(partial_arg, param);
    });
}

function atLeast(n, parsers) {
  var partial_arg = LazyList$ReasonParse.toLazy(parsers);
  return (function (param) {
      return CombLazy$ReasonParse.atLeast(n, partial_arg, param);
    });
}

function keep(indices, parsers) {
  var partial_arg = LazyList$ReasonParse.toLazy(parsers);
  return (function (param) {
      return CombLazy$ReasonParse.keep(indices, partial_arg, param);
    });
}

function keepNth(n, parsers) {
  var partial_arg = LazyList$ReasonParse.toLazy(parsers);
  return (function (param) {
      return CombLazy$ReasonParse.keepNth(n, partial_arg, param);
    });
}

function keepFirst(parsers) {
  return CombLazy$ReasonParse.keepFirst(LazyList$ReasonParse.toLazy(parsers));
}

var toLazy = LazyList$ReasonParse.toLazy;

var many = CombLazy$ReasonParse.many;

var keepLast = CombLazy$ReasonParse.keepLast;

var between = CombLazy$ReasonParse.between;

var sepBy = CombLazy$ReasonParse.sepBy;

exports.toLazy = toLazy;
exports.alt = alt;
exports.seq = seq;
exports.atLeast = atLeast;
exports.many = many;
exports.keep = keep;
exports.keepNth = keepNth;
exports.keepFirst = keepFirst;
exports.keepLast = keepLast;
exports.between = between;
exports.sepBy = sepBy;
/* CombLazy-ReasonParse Not a pure module */
