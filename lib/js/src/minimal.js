// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Stream = require("bs-platform/lib/js/stream.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function seq(parser1, parser2, charStream) {
  var match = Curry._1(parser1, charStream);
  if (match[0] >= 781116926) {
    return /* `Fail */[
            781116926,
            "Parser 1 failed with message: " + match[1]
          ];
  } else {
    var match$1 = match[1];
    var match$2 = Curry._1(parser2, match$1[1]);
    if (match$2[0] >= 781116926) {
      return /* `Fail */[
              781116926,
              "Parser 1 succeeded, but parser 2 failed with message: " + match$2[1]
            ];
    } else {
      var match$3 = match$2[1];
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `List */[
                  848054398,
                  /* :: */[
                    match$1[0],
                    /* :: */[
                      match$3[0],
                      /* [] */0
                    ]
                  ]
                ],
                match$3[1]
              ]
            ];
    }
  }
}

function nextOpt(stream) {
  try {
    return /* Some */[Stream.next(stream)];
  }
  catch (exn){
    if (exn === Stream.Failure) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
}

function stringOfStringList(lst) {
  return $$Array.of_list(lst).join(", ");
}

function stringOfCharList(lst) {
  var lst$1 = List.map(Char.escaped, lst);
  return $$Array.of_list(lst$1).join(", ");
}

function alt(parserStream, charStream) {
  while(true) {
    var match = nextOpt(parserStream);
    if (match) {
      var success = Curry._1(match[0], charStream);
      if (success[0] >= 781116926) {
        continue ;
        
      } else {
        return success;
      }
    } else {
      return /* `Fail */[
              781116926,
              "None of the parsers matched"
            ];
    }
  };
}

function tillFailure(parserStream, charStream) {
  var match = nextOpt(parserStream);
  if (match) {
    var fail = Curry._1(match[0], charStream);
    if (fail[0] >= 781116926) {
      return /* tuple */[
              /* [] */0,
              /* Some */[/* `ParseFailure */[
                  954667127,
                  fail
                ]],
              charStream
            ];
    } else {
      var match$1 = fail[1];
      var match$2 = tillFailure(parserStream, match$1[1]);
      return /* tuple */[
              /* :: */[
                match$1[0],
                match$2[0]
              ],
              match$2[1],
              match$2[2]
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            /* Some */[/* StreamFailure */-724409462],
            charStream
          ];
  }
}

function tillFailureWrapped(parserStream, charStream) {
  var match = tillFailure(parserStream, charStream);
  var match$1 = match[1];
  if (match$1) {
    return /* tuple */[
            match[0],
            match$1[0],
            match[2]
          ];
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          [
            "minimal.re",
            42,
            22
          ]
        ];
  }
}

function stream(parserStream, charStream) {
  var match = tillFailureWrapped(parserStream, charStream);
  var match$1 = match[1];
  if (typeof match$1 === "number") {
    return /* `Success */[
            94326179,
            /* tuple */[
              /* `List */[
                848054398,
                match[0]
              ],
              match[2]
            ]
          ];
  } else {
    var message = Curry._2(Format.sprintf(/* Format */[
              /* String_literal */Block.__(11, [
                  "Parser ",
                  /* Int */Block.__(4, [
                      /* Int_d */0,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* String_literal */Block.__(11, [
                          " failed: ",
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ])
                    ])
                ]),
              "Parser %d failed: %s"
            ]), Stream.count(parserStream), match$1[1][1]);
    return /* `Fail */[
            781116926,
            message
          ];
  }
}

var Combinator = /* module */[
  /* seq */seq,
  /* nextOpt */nextOpt,
  /* stringOfStringList */stringOfStringList,
  /* stringOfCharList */stringOfCharList,
  /* alt */alt,
  /* tillFailure */tillFailure,
  /* tillFailureWrapped */tillFailureWrapped,
  /* stream */stream
];

function stringOfStringList$1(lst) {
  return "[" + ($$Array.of_list(lst).join(", ") + "]");
}

function stringOfCharList$1(lst) {
  return stringOfStringList$1(List.map(Char.escaped, lst));
}

function stringOfValue(v) {
  var variant = v[0];
  if (variant !== -319464051) {
    if (variant >= 848054398) {
      return stringOfStringList$1(List.map(stringOfValue, v[1]));
    } else {
      return Char.escaped(v[1]);
    }
  } else {
    return Pervasives.string_of_int(v[1]);
  }
}

function letter(stream) {
  console.log("letter: " + stringOfStringList$1(List.map(Char.escaped, stream)));
  if (stream) {
    var c = stream[0];
    var match = +(65 <= c && c <= 90 || 97 <= c && c <= 122);
    if (match !== 0) {
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `Letter */[
                  -677568250,
                  c
                ],
                stream[1]
              ]
            ];
    } else {
      return /* `Fail */[
              781116926,
              "Not a letter."
            ];
    }
  } else {
    return /* `Fail */[
            781116926,
            "Stream is empty"
          ];
  }
}

function digit(stream) {
  if (stream) {
    var c = stream[0];
    var match = +(48 <= c && c <= 57);
    if (match !== 0) {
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `Digit */[
                  -319464051,
                  Caml_format.caml_int_of_string(Char.escaped(c))
                ],
                stream[1]
              ]
            ];
    } else {
      return /* `Fail */[
              781116926,
              "Not a digit."
            ];
    }
  } else {
    return /* `Fail */[
            781116926,
            "Stream is empty"
          ];
  }
}

var partial_arg = Stream.of_list(/* :: */[
      letter,
      /* :: */[
        digit,
        /* :: */[
          digit,
          /* [] */0
        ]
      ]
    ]);

function p(param) {
  return stream(partial_arg, param);
}

var match = p(/* :: */[
      /* "a" */97,
      /* :: */[
        /* "0" */48,
        /* :: */[
          /* "b" */98,
          /* :: */[
            /* "1" */49,
            /* [] */0
          ]
        ]
      ]
    ]);

var tmp;

if (match[0] >= 781116926) {
  tmp = Curry._1(Format.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "fail!\n",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* End_of_format */0
                  ])
              ]),
            "fail!\n%s"
          ]), match[1]);
} else {
  var match$1 = match[1];
  tmp = Curry._2(Format.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "success!\nvalue: ",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        ", rest: ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ])
                  ])
              ]),
            "success!\nvalue: %s, rest: %s"
          ]), stringOfValue(match$1[0]), stringOfStringList$1(List.map(Char.escaped, match$1[1])));
}

console.log(tmp);

exports.Combinator = Combinator;
exports.stringOfStringList = stringOfStringList$1;
exports.stringOfCharList = stringOfCharList$1;
exports.stringOfValue = stringOfValue;
exports.letter = letter;
exports.digit = digit;
exports.p = p;
/* partial_arg Not a pure module */
