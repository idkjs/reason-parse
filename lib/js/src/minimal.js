// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function seq(parser1, parser2, stream) {
  var match = Curry._1(parser1, stream);
  if (match[0] >= 781116926) {
    return /* `Fail */[
            781116926,
            "Parser 1 failed with message: " + match[1]
          ];
  } else {
    var match$1 = match[1];
    var match$2 = Curry._1(parser2, match$1[1]);
    if (match$2[0] >= 781116926) {
      return /* `Fail */[
              781116926,
              "Parser 1 succeeded, but parser 2 failed with message: " + match$2[1]
            ];
    } else {
      var match$3 = match$2[1];
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `List */[
                  848054398,
                  /* :: */[
                    match$1[0],
                    /* :: */[
                      match$3[0],
                      /* [] */0
                    ]
                  ]
                ],
                match$3[1]
              ]
            ];
    }
  }
}

var Combinator = /* module */[/* seq */seq];

function stringOfStringList(lst) {
  return $$Array.of_list(lst).join(", ");
}

function stringOfCharList(lst) {
  var lst$1 = List.map(Char.escaped, lst);
  return $$Array.of_list(lst$1).join(", ");
}

function stringOfValue(v) {
  if (typeof v === "number") {
    return "I don't know how to stringify this!";
  } else {
    var variant = v[0];
    if (variant !== -677568250) {
      if (variant !== -319464051) {
        if (variant !== 848054398) {
          return "I don't know how to stringify this!";
        } else {
          var lst = List.map(stringOfValue, v[1]);
          return $$Array.of_list(lst).join(", ");
        }
      } else {
        return Pervasives.string_of_int(v[1]);
      }
    } else {
      return Char.escaped(v[1]);
    }
  }
}

function letter(stream) {
  if (stream) {
    var c = stream[0];
    var match = +(65 <= c && c <= 90 || 97 <= c && c <= 122);
    if (match !== 0) {
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `Letter */[
                  -677568250,
                  c
                ],
                stream[1]
              ]
            ];
    } else {
      return /* `Fail */[
              781116926,
              "Not a letter."
            ];
    }
  } else {
    return /* `Fail */[
            781116926,
            "Stream is empty"
          ];
  }
}

function digit(stream) {
  if (stream) {
    var c = stream[0];
    var match = +(48 <= c && c <= 57);
    if (match !== 0) {
      return /* `Success */[
              94326179,
              /* tuple */[
                /* `Digit */[
                  -319464051,
                  c
                ],
                stream[1]
              ]
            ];
    } else {
      return /* `Fail */[
              781116926,
              "Not a digit."
            ];
    }
  } else {
    return /* `Fail */[
            781116926,
            "Stream is empty"
          ];
  }
}

function p(param) {
  return seq(letter, digit, param);
}

var match = p(/* :: */[
      /* "a" */97,
      /* :: */[
        /* "1" */49,
        /* :: */[
          /* "b" */98,
          /* :: */[
            /* "2" */50,
            /* [] */0
          ]
        ]
      ]
    ]);

var result;

if (match[0] >= 781116926) {
  result = Curry._1(Format.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "fail!\n",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* End_of_format */0
                  ])
              ]),
            "fail!\n%s"
          ]), match[1]);
} else {
  var match$1 = match[1];
  var lst = List.map(Char.escaped, match$1[1]);
  result = Curry._2(Format.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "success!\nvalue: ",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        ", rest: ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ])
                  ])
              ]),
            "success!\nvalue: %s, rest: %s"
          ]), stringOfValue(match$1[0]), $$Array.of_list(lst).join(", "));
}

console.log(result);

exports.Combinator = Combinator;
exports.stringOfStringList = stringOfStringList;
exports.stringOfCharList = stringOfCharList;
exports.stringOfValue = stringOfValue;
exports.letter = letter;
exports.digit = digit;
exports.p = p;
exports.result = result;
/* match Not a pure module */
